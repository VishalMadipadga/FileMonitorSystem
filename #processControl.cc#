#include <unistd.h> /* needed for fork() */
#include <stdio.h>  /* needed for printf() and perror() */

void processControl ()
{

  int a =10;
  pid_t forkvalue;

  printf("Value of a before fork: %d\n", a);

  forkvalue = fork();

  if(forkvalue == -1)  /* Error... no child created */
    {
      perror("There was an error in the fork.  No child was created.");
      return 1;
    }
  else if(forkvalue == 0)   /* I am the child */
    {
      printf("This is the child.  The value of a is %d and My pid is: %ld\n", a, getpid());
      printf("Child Exiting\n");
      return 0;
    }
  else   /* I am the parent */
    {
      printf("This is the parent.  The value of a is %d and my child's pid is: %ld\n", a, forkvalue);
      printf("Parent Exiting\n");
      return 0;
    }

  return 0;     /* should never get here */
}

